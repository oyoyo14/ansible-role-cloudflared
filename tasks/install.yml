- block:
  - name: Add Cloudflare repository GPG key
    ansible.builtin.apt_key:
      url: "{{ cf_repository_key_url }}"
      state: present
  - name: Add Cloudflare repository to apt sources list
    ansible.builtin.apt_repository:
      repo: "{{ cf_repository }}"
      state: present
  - name: Install Cloudflared
    ansible.builtin.apt:
      update_cache: yes
      name: cloudflared
      state: latest
  when: (ansible_distribution == "Debian" or ansible_distribution == "Ubuntu") and cf_os_package_enable
- block:
  - name: Check if file '{{ daemon_location }}' exists
    ansible.builtin.stat:
      path: "{{ daemon_location }}"
      checksum_algorithm: sha256
    register: stat_result
  - name: Unarchive {{ cf_download_baseurl }}/{{ cf_binary_filename }} to {{ cf_install_target_dir }}
    unarchive:
      src: "{{ cf_download_baseurl }}/{{ cf_binary_filename }}"
      dest: "{{ cf_install_target_dir }}"
      remote_src: yes
    when: not stat_result.stat.exists or cf_force_install
  when: (ansible_distribution != "Debian" and ansible_distribution != "Ubuntu") or not cf_os_package_enable
- name: Create {{ cf_config_dir }} if it does not exist
  ansible.builtin.file:
    path: "{{ cf_config_dir }}"
    state: directory
    mode: 0744
- block:
  - name: Login to cloudflare using standard way (browser window)
    ansible.builtin.command: cloudflared login
    register: login_result
    when: cf_cert_location is not defined and cf_cert_content is not defined
  - name: Copy `{{ cf_cert_location }}` to {{ cf_config_dir }}/{{ cf_cert_name }}
    ansible.builtin.copy:
      src: "{{ cf_cert_location }}"
      dest: "{{ cf_config_dir }}/{{ cf_cert_name }}"
      owner: "{{ cf_systemd_user }}"
      group: "{{ cf_systemd_group }}"
      mode: "0640"
    when: cf_cert_location is defined and cf_cert_content is not defined
  - name: Write certificate to {{ cf_config_dir }}/{{ cf_cert_name }}
    ansible.builtin.copy:
      content: "{{ cf_cert_content }}"
      dest: "{{ cf_config_dir }}/{{ cf_cert_name }}"
      owner: "{{ cf_systemd_user }}"
      group: "{{ cf_systemd_group }}"
      mode: "0640"
    when: cf_cert_content is defined
  when: not cf_install_only
